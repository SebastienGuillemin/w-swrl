package com.sebastienguillemin.wswrl.core.engine;

import java.io.File;
import java.util.Collections;
import java.util.Hashtable;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import javax.swing.Icon;

import org.semanticweb.owlapi.model.AddAxiom;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLAxiom;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyChange;
import org.semanticweb.owlapi.model.OWLOntologyManager;
import org.semanticweb.owlapi.model.SWRLRule;
import org.semanticweb.owlapi.reasoner.OWLReasoner;
import org.swrlapi.bridge.SWRLRuleEngineBridgeController;
import org.swrlapi.bridge.TargetSWRLRuleEngine;
import org.swrlapi.builtins.SWRLBuiltInBridgeController;
import org.swrlapi.core.SWRLAPIOWLOntology;
import org.swrlapi.core.SWRLAPIRule;
import org.swrlapi.core.SWRLRuleRenderer;
import org.swrlapi.exceptions.SWRLAPIException;
import org.swrlapi.exceptions.SWRLBuiltInException;
import org.swrlapi.exceptions.SWRLRuleEngineException;
import org.swrlapi.exceptions.SWRLRuleException;
import org.swrlapi.exceptions.TargetSWRLRuleEngineException;
import org.swrlapi.factory.OWLInferredAxiomFilter;
import org.swrlapi.owl2rl.OWL2RLEngine;
import org.swrlapi.parser.SWRLParseException;
import org.swrlapi.parser.SWRLParser;
import org.swrlapi.ui.model.SWRLAutoCompleter;

import com.sebastienguillemin.wswrl.core.WSWRLOntology;
import com.sebastienguillemin.wswrl.core.WSWRLRule;
import com.sebastienguillemin.wswrl.core.WSWRLRuleEngine;
import com.sebastienguillemin.wswrl.core.exception.AlreadyInRankException;
import com.sebastienguillemin.wswrl.core.exception.WSWRLBuiltInException;
import com.sebastienguillemin.wswrl.core.exception.WSWRLParseException;
import com.sebastienguillemin.wswrl.core.exception.WSWRLRuleEngineException;
import com.sebastienguillemin.wswrl.core.exception.WSWRLRuleException;

public class DefaultWSWRLRuleEngine implements WSWRLRuleEngine {
    private WSWRLOntology wswrlOntology;
    private Hashtable<String, WSWRLRule> wswrlRules;
    private TargetSWRLRuleEngine targetSWRLRuleEngine;
    private SWRLBuiltInBridgeController builtInBridgeController;
    private SWRLRuleEngineBridgeController ruleEngineBridgeController;

    public DefaultWSWRLRuleEngine(WSWRLOntology ontology, TargetSWRLRuleEngine targetSWRLRuleEngine,
            SWRLBuiltInBridgeController builtInBridgeController,
            SWRLRuleEngineBridgeController ruleEngineBridgeController) {
        this.wswrlOntology = ontology;
        this.wswrlRules = new Hashtable<>();
        this.targetSWRLRuleEngine = targetSWRLRuleEngine;
        this.builtInBridgeController = builtInBridgeController;
        this.ruleEngineBridgeController = ruleEngineBridgeController;

        // TODO : charger les règles sérialisées dans le fichier de l'ontologie.
        // this.loadWSWRLRules();
    }

    @Override
    public void infer() throws WSWRLRuleEngineException {
        importAssertedOWLAxioms(); // Import will call reset()
        run();
        exportInferredOWLAxioms();
    }

    @Override
    public WSWRLRule createWSWRLRule(String ruleName, String rule)
            throws WSWRLParseException, WSWRLBuiltInException, AlreadyInRankException {
        WSWRLRule wswrlRule = this.wswrlOntology.createWSWRLRule(ruleName, rule);
        this.wswrlRules.put(ruleName, wswrlRule);
        return wswrlRule;
    }

    @Override
    public Hashtable<String, WSWRLRule> getWSWRLRules() {
        return this.wswrlRules;
    }

    @Override
    public WSWRLRule getWSWRLRule(String ruleName) throws WSWRLRuleException {
        if (!this.wswrlRules.containsKey(ruleName))
            throw new WSWRLRuleException("Rule " + ruleName + " does not exist.");

        return this.wswrlRules.get(ruleName);
    }

    @Override
    public void importAssertedOWLAxioms() throws SWRLRuleEngineException {
        reset();

        try {
            exportOWLAxioms2TargetRuleEngine(this.wswrlOntology.getOWLAxioms()); // OWL axioms include SWRL rules
        } catch (SWRLAPIException e) {
            throw new SWRLRuleEngineException(
                    "error exporting knowledge to rule engine: " + (e.getMessage() != null ? e.getMessage() : ""), e);
        }
    }

    @Override
    public void run() throws SWRLRuleEngineException {
        getTargetSWRLRuleEngine().runRuleEngine();
    }

    @Override
    public void exportInferredOWLAxioms() throws SWRLRuleEngineException {
        try {
            getSWRLAPIOWLOntology().startEventFreezeMode(); // Suspend possible event generation for bulk updates.

            // Write OWL axioms generated by built-ins in rules.
            writeOWLAxioms2OWLOntology(this.builtInBridgeController.getInjectedOWLAxioms());
            // Write OWL axioms inferred by rules.
            writeOWLAxioms2OWLOntology(this.ruleEngineBridgeController.getInferredOWLAxioms());
        } finally {
            getSWRLAPIOWLOntology().finishEventFreezeMode();
        }
    }

    public OWLOntology getOWLOntology() {
        return getWSWRLOntology().getOWLOntology();
    }

    @Override
    public OWL2RLEngine getOWL2RLEngine() {
        return this.targetSWRLRuleEngine.getOWL2RLEngine();
    }

    // Convenience methods to display bridge activity

    @Override
    public int getNumberOfImportedSWRLRules() {
        return this.wswrlOntology.getNumberOfSWRLRules();
    }

    @Override
    public int getNumberOfAssertedOWLClassDeclarationAxioms() {
        return this.wswrlOntology.getNumberOfOWLClassDeclarationAxioms();
    }

    @Override
    public int getNumberOfAssertedOWLIndividualDeclarationsAxioms() {
        return this.wswrlOntology.getNumberOfOWLIndividualDeclarationAxioms();
    }

    @Override
    public int getNumberOfAssertedOWLObjectPropertyDeclarationAxioms() {
        return this.wswrlOntology.getNumberOfOWLObjectPropertyDeclarationAxioms();
    }

    @Override
    public int getNumberOfAssertedOWLDataPropertyDeclarationAxioms() {
        return this.wswrlOntology.getNumberOfOWLDataPropertyDeclarationAxioms();
    }

    @Override
    public int getNumberOfAssertedOWLAxioms() {
        return this.wswrlOntology.getNumberOfOWLAxioms();
    }

    @Override
    public int getNumberOfInferredOWLAxioms() {
        return this.ruleEngineBridgeController.getNumberOfInferredOWLAxioms();
    }

    @Override
    public int getNumberOfInjectedOWLAxioms() {
        return this.builtInBridgeController.getNumberOfInjectedOWLAxioms();
    }

    public boolean isInjectedOWLAxiom(OWLAxiom axiom) {
        return this.builtInBridgeController.isInjectedOWLAxiom(axiom);
    }

    // Convenience methods to display the contents of the bridge

    @Override
    public Set<SWRLAPIRule> getSWRLRules() {
        return this.wswrlOntology.getSWRLRules();
    }

    @Override
    public Optional<SWRLAPIRule> getSWRLRule(String ruleName) throws SWRLRuleException {
        return this.wswrlOntology.getSWRLRule(ruleName);
    }

    @Override
    public SWRLAPIRule createSWRLRule(String ruleName, String rule)
            throws SWRLParseException, SWRLBuiltInException {
        return this.wswrlOntology.createSWRLRule(ruleName, rule);
    }

    @Override
    public SWRLAPIRule createSWRLRule(String ruleName, String rule,
            String comment, boolean isActive) throws SWRLParseException, SWRLBuiltInException {
        return this.wswrlOntology.createSWRLRule(ruleName, rule, comment, isActive);
    }

    @Override
    public void replaceSWRLRule(String originalRuleName, String ruleName,
            String rule, String comment, boolean isActive)
            throws SWRLParseException, SWRLBuiltInException {
        this.wswrlOntology.replaceSWRLRule(originalRuleName, ruleName, rule, comment, isActive);
    }

    @Override
    public void deleteSWRLRule(String ruleName) {
        this.wswrlOntology.deleteSWRLRule(ruleName);
    }

    @Override
    public boolean isSWRLBuiltInIRI(IRI iri) {
        return this.wswrlOntology.isSWRLBuiltInIRI(iri);
    }

    @Override
    public boolean isSWRLBuiltIn(String shortName) {
        return this.wswrlOntology.isSWRLBuiltIn(shortName);
    }

    @Override
    public Set<IRI> getSWRLBuiltInIRIs() {
        return Collections.unmodifiableSet(this.wswrlOntology.getSWRLBuiltInIRIs());
    }

    @Override
    public SWRLParser createSWRLParser() {
        return this.wswrlOntology.createSWRLParser();
    }

    @Override
    public SWRLAutoCompleter createSWRLAutoCompleter() {
        return this.wswrlOntology.createSWRLAutoCompleter();
    }

    @Override
    public SWRLRuleRenderer createSWRLRuleRenderer() {
        return this.wswrlOntology.createSWRLRuleRenderer();
    }

    @Override
    public Set<OWLAxiom> getAssertedOWLAxioms() {
        return this.wswrlOntology.getOWLAxioms();
    }

    @Override
    public Set<OWLAxiom> getInferredOWLAxioms() {
        return this.ruleEngineBridgeController.getInferredOWLAxioms();
    }

    @Override
    public Set<OWLAxiom> getInjectedOWLAxioms() {
        return this.builtInBridgeController.getInjectedOWLAxioms();
    }

    @Override
    public String getRuleEngineName() {
        return this.targetSWRLRuleEngine.getTargetRuleEngineName();
    }

    @Override
    public String getRuleEngineVersion() {
        return this.targetSWRLRuleEngine.getTargetRuleEngineVersion();
    }

    @Override
    public OWLReasoner getOWLReasoner() {
        return this.targetSWRLRuleEngine.getOWLReasoner();
    }

    @Override
    public void loadExternalSWRLBuiltInLibraries(File swrlBuiltInLibraryDirectory) {
        this.wswrlOntology.getSWRLBuiltInLibraryManager()
                .loadExternalSWRLBuiltInLibraries(swrlBuiltInLibraryDirectory);
    }

    @Override
    public Icon getRuleEngineIcon() {
        return this.targetSWRLRuleEngine.getTargetRuleEngineIcon();
    }

    public WSWRLOntology getWSWRLOntology() {
        return this.wswrlOntology;
    }

    @Override
    public SWRLAPIOWLOntology getSWRLAPIOWLOntology() {
        return this.wswrlOntology;
    }

    private void loadWSWRLRules() {
        for (SWRLAPIRule rule : this.getSWRLRules()) {
            this.wswrlRules.put(rule.getRuleName(), (WSWRLRule) rule);
        }
    }

    private void reset() {
        try {
            getTargetSWRLRuleEngine().resetRuleEngine(); // Reset the target rule engine
            getBuiltInBridgeController().reset();
            getOWL2RLEngine().resetRuleSelectionChanged();
            this.wswrlOntology.processOntology();
        } catch (SWRLBuiltInException e) {
            throw new SWRLRuleEngineException(
                    "error running rule engine: " + (e.getMessage() != null ? e.getMessage() : ""),
                    e);
        }
    }

    private TargetSWRLRuleEngine getTargetSWRLRuleEngine() throws SWRLRuleEngineException {
        if (this.targetSWRLRuleEngine == null)
            throw new SWRLRuleEngineException("no target rule engine specified");

        return this.targetSWRLRuleEngine;
    }

    private void writeOWLAxioms2OWLOntology(Set<OWLAxiom> axioms) throws SWRLRuleEngineException {
        OWLInferredAxiomFilter inferredAxiomFilter = new OWLInferredAxiomFilter(axioms);
        List<OWLAxiom> filteredAxioms = axioms.stream().filter(a -> !a.accept(inferredAxiomFilter))
                .collect(Collectors.toList());
        List<? extends OWLOntologyChange> changes = filteredAxioms.stream().map(a -> new AddAxiom(getOWLOntology(), a))
                .collect(Collectors.toList());

        try {
            getOWLOntologyManager().applyChanges(changes);
        } catch (RuntimeException e) {
            throw new SWRLRuleEngineException("Error writing OWL axioms to ontology", e);
        }
    }

    private OWLOntologyManager getOWLOntologyManager() {
        return this.getSWRLAPIOWLOntology().getOWLOntologyManager();
    }

    private SWRLBuiltInBridgeController getBuiltInBridgeController() {
        return this.builtInBridgeController;
    }

    private void exportOWLAxioms2TargetRuleEngine(Set<OWLAxiom> axioms)
            throws SWRLRuleEngineException, TargetSWRLRuleEngineException {
        for (OWLAxiom axiom : axioms)
            getTargetSWRLRuleEngine().defineOWLAxiom(axiom);
    }
}